---
# VRF topology
# Leaf02: was single VRF (vrfA) → now dual VRF (vrfA + vrfC) with symmetric VXLAN VNIs (10020, 10060) and VLANs (10/20 for A, 50/60 for C). eth4 now bound to vrfC (was unbound).
# Leaf03: was single VRF (vrfB) → now dual VRF (vrfA + vrfD) with VNIs (10020, 10080) and VLANs (10/20 for A, 70/80 for D). eth3 now in vrfA (was unbound), eth4 is vrfD (was vrfB).
# Leaf01: stayed dual VRF (vrfA + vrfB), unchanged interface/VRF mapping.
# Inter-VRF leaking approach
# Previous: no inter-VRF import; each leaf with one VRF (except leaf01).
# Config4: adds per-leaf local leaking using address-family ipv4 unicast → import vrf <target> in router bgp … vrf …:
# leaf01: vrfA ↔ vrfB
# leaf02: vrfA ↔ vrfC
# leaf03: vrfA ↔ vrfD
# Still no route-maps; leaking is explicit via import vrf, relying on EVPN type-5 (you kept advertise ipv4 unicast under l2vpn evpn ✔).
# VXLAN/VLAN surface
# Previous: leaf02 only VNI 10020 (vrfA), leaf03 only 10040 (vrfB).
# Config4: each leaf now has two VNIs and corresponding VLAN SVIs (some with IPs), and a single vmbr0 carrying all VNIs as before.
# VM static routes
# Expanded/normalized.
# vm01: now pushes broader routes (adds 10.0.21.0/24, 10.0.31.0/24, and aggregates 10.1.0.0/16, 10.2.0.0/16, etc. on eth2).
# vm02 / vm03: route lists updated to include the new peer VRF/VNI subnets and the leaf01 dual-VRF subnets.
# Net effect: reachability across the new VRFs without needing policy on the spines.
# Implications / gotchas to watch
# EVPN type-5 dependence: Your inter-VRF leaking via import vrf assumes type-5 routes are present; you’ve kept advertise ipv4 unicast under l2vpn evpn, which is required. Good.
# Local only: import vrf is local to the node. That’s what you want here (leak within each leaf). Spines remain clean RRs—no policy there.
# Duplicate lo1_address on spines: Both spines set lo1_address: 10.1.10.2/32 and include it in OSPF. If intentional (anycast loopback), fine; otherwise it can be confusing in OSPF/RIB. This is unchanged but worth flagging.
# VM route placement: With more complete inter-VRF leaking, you could eventually reduce the static route spray on VMs and let the leaf do more forwarding—optional, but it will simplify VM configs.
### checks
# template does symmetric leaking on each leaf so they should be able to communicate:
# leaf01: vrfA ↔ vrfB
# leaf02: vrfA ↔ vrfC
# leaf03: vrfA ↔ vrfD
# From the VMs
# vm01 (B on eth2, A on eth1)
# ✅ Should work
# Intra-A (all leaves): 10.1.110.1, 10.1.120.1, 10.1.130.1
# Local B (leaf01): 10.1.111.1
# Cross-leaf cross-VRF via A (because A↔B, A↔C, A↔D):
# to leaf02 C: 10.1.121.1
# to leaf03 D: 10.1.131.1 ← the one you tested
# (Same logic means you can also reach the /30 link IPs on other VMs/leaves if they’re in those VRFs—your redistribute connected in the VRF AF will advertise them as type-5.)
# ❌ Should fail
# Default-VRF stuff (not in any VRF, e.g., spine/leaf loopbacks) from the VM’s VRFs:
# 10.1.0.1, 10.1.0.2 (spine LOs)
# 10.0.0.1, 10.0.0.2, 10.0.0.3 (leaf LOs)
# (No VRF↔default leaking configured.)
# vm02 (C on eth2, A on eth1) — symmetric to vm01
# ✅ Works
# A SVIs: 10.1.110.1, 10.1.120.1, 10.1.130.1
# Local C: 10.1.121.1
# Cross via A:
# to leaf01 B: 10.1.111.1
# to leaf03 D: 10.1.131.1
# ❌ Fails
# Default-VRF loopbacks: 10.1.0.1, 10.1.0.2, 10.0.0.x
# vm03 (D on eth2, A on eth1) — symmetric again
# ✅ Works
# A SVIs: 10.1.110.1, 10.1.120.1, 10.1.130.1
# Local D: 10.1.131.1
# Cross via A:
# to leaf01 B: 10.1.111.1
# to leaf02 C: 10.1.121.1
# ❌ Fails
# Default-VRF loopbacks: 10.1.0.1, 10.1.0.2, 10.0.0.x
# From the leaves (VRF-aware pings)
# Leaf01
# ✅ Works
# ip vrf exec vrfA ping 10.1.120.1, 10.1.130.1 (A across fabric)
# Local leak both ways (symmetric):
# ip vrf exec vrfA ping 10.1.111.1 and ip vrf exec vrfB ping 10.1.110.1
# Cross-leaf cross-VRF via A:
# ip vrf exec vrfB ping 10.1.121.1, ip vrf exec vrfB ping 10.1.131.1
# ❌ Fails
# From vrfA/vrfB to default-VRF IPs (e.g., spines’ 10.1.0.1/0.2), unless you add VRF↔default leaking/NAT.
# Leaf02
# ✅ Works
# ip vrf exec vrfA ping 10.1.110.1, 10.1.130.1
# Local leak both ways:
# ip vrf exec vrfA ping 10.1.121.1 and ip vrf exec vrfC ping 10.1.120.1
# Cross via A:
# ip vrf exec vrfC ping 10.1.111.1, ip vrf exec vrfC ping 10.1.131.1
# ❌ Fails
# VRF→default-VRF loopbacks (spines/leaf LOs).
# Leaf03
# ✅ Works
# ip vrf exec vrfA ping 10.1.110.1, 10.1.120.1
# Local leak both ways:
# ip vrf exec vrfA ping 10.1.131.1 and ip vrf exec vrfD ping 10.1.130.1
# Cross via A:
# ip vrf exec vrfD ping 10.1.111.1, ip vrf exec vrfD ping 10.1.121.1
# ❌ Fails
# VRF→default-VRF loopbacks.


interfaces:
  - name: "eth1"
    address: "10.1.1.1/30"
    connected_to: "spine01"
  - name: "eth2"
    address: "10.2.1.1/30"
    connected_to: "spine02"
  - name: "eth3"
    address: "10.0.10.1/30"
    connected_to: "vm01"
    vrf: vrfA
  - name: "eth4"
    address: "10.0.11.1/30"
    connected_to: "vm01"
    vrf: vrfB
vnix:
  - id: 10020
    rt: 20
  - id: 10040
    rt: 40
vlans:
  - id: 10
    ip: "10.1.110.1/24"
    vrf: vrfA
  - id: 20
    vrf: vrfA
  - id: 30
    ip: "10.1.111.1/24"
    vrf: vrfB
  - id: 40
    vrf: vrfB
vrfs:
  - id: vrfA
    vni: 10020
    target: vrfB
  - id: vrfB
    vni: 10040
    target: vrfA

lo_address: 10.0.0.1/32

router_id: 10.0.0.1

ospf_networks:
  - subnet: "10.0.0.1/32"
  - subnet: "10.1.1.0/30"
  - subnet: "10.2.1.0/30"
  - subnet: "10.0.10.0/30"
  - subnet: "10.0.11.0/30"